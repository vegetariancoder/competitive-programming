use shimano;
-- https://www.sqlservertutorial.net/getting-started/sql-server-sample-database/


-- Find the customer who has placed the highest total value of orders and calculate that value.

with total_price as (
select
    customers.customer_id,
    customers.first_name,
    customers.last_name,
    sum(order_items.list_price) as total_spending
from
    customers
inner join
    orders
on
    customers.customer_id = orders.customer_id
inner join
    order_items
on
    orders.order_id = order_items.order_id
group by
    customers.customer_id, customers.first_name, customers.last_name),
answer as (
select
    *,
    dense_rank() over (order by total_spending desc ) as rnk
from
    total_price)
select
    customer_id, first_name, last_name, total_spending
from
    answer
where
    rnk = 1;


-- List all products that have never been ordered along with their details.


select
    *
from
    products
where
    product_id not in (select product_id from order_items);



-- Find the store with the highest average order value.

with avg_order as (
select
    stores.store_id,

    avg(order_items.list_price) as avg_order_val
from
    stores
inner join
    orders
on
    stores.store_id = orders.store_id
inner join
    order_items
on
    orders.order_id = order_items.order_id
group by stores.store_id),
answer as (
select
    *,
    dense_rank() over (order by avg_order_val desc ) as drnk
from
    avg_order)
select
    store_id,
    avg_order_val
from
    answer
where
    drnk = 1;

-- Determine the total revenue generated by each store, considering the discounts applied on order items.

with answer as (
select
    stores.store_id,
    stores.store_name,
    order_items.list_price,
    order_items.discount,
    order_items.list_price - (order_items.list_price * discount) as actual_price
from
    stores
inner join
    orders
on
    stores.store_id = orders.store_id
inner join
    order_items
on
    orders.order_id = order_items.order_id)
select
    store_id,
    store_name,
    sum(actual_price) as total_Revenue
from
    answer
group by store_id, store_name ;


-- Find the customer who has placed the most orders and list all the orders they have placed.

with cnt_cte as (
select
    orders.customer_id,
    count(order_id) as order_cnt
from
    orders
group by
    customer_id),
orders_list as (
select
    *,
    dense_rank() over (order by order_cnt desc ) as drnk
from
    cnt_cte)
select
    orders.customer_id,
    orders.order_id,
    order_items.product_id
from
    orders
inner join
    order_items
on
    orders.order_id = order_items.order_id
where
    customer_id in (select customer_id from orders_list where drnk = 1);


-- Calculate the total sales per staff member and find the staff member with the highest sales.

with total_sale_staff as (
select
    staffs.staff_id,
    staffs.first_name,
    staffs.last_name,
    sum(order_items.list_price) as total_sale
from
    orders
inner join
    order_items
on
    orders.order_id = order_items.order_id
inner join
    staffs
on
    orders.staff_id = staffs.staff_id
group by staffs.staff_id, staffs.first_name, staffs.last_name),
answer as (
select
    *,
    dense_rank() over (order by total_sale desc ) as drnk
from
    total_sale_staff)
select
    staff_id, first_name, last_name, total_sale
from
    answer
where
    drnk = 1;


-- Identify the product with the highest number of unique customers who have purchased it.

with cnt_unique as (
select
    product_id,
    count(distinct customer_id) as cnt_unique_customer
from
    order_items
inner join
    orders
on
    order_items.order_id = orders.order_id
group by product_id),
answer as (
select
    *,
    dense_rank() over (order by cnt_unique_customer desc ) as drnk
from
    cnt_unique)
select
    products.*
from
    answer
inner join
    products
on
    answer.product_id = products.product_id
where
    drnk=1;

-- Find the brand that has the highest number of products in the orders and the total quantity ordered for each product in that brand.

with cnt_product_brand as (
select
    order_items.product_id,
    brands.brand_id,
    brands.brand_name,
    count(*) as cnt
from
    order_items
inner join
    products
on
    order_items.product_id = products.product_id
inner join
    brands
on
    products.brand_id = brands.brand_id
group by
    product_id,brands.brand_id,brands.brand_name),
highest_brand as (
              select *,
              dense_rank() over (order by cnt desc ) as drnk
from
    cnt_product_brand
    )
select
    brand_id,
    brand_name,
    product_id,
    cnt
from
    highest_brand
where
    brand_id = (select brand_id from highest_brand where drnk=1);


-- Retrieve the total sales and categorize them based on the year. If the year is 2017, label it as "Current Year", if it's 2016, label it as "Last Year", otherwise label it as "Previous Years". Also, calculate the total sales amount for each category.

select
    case
        when year(order_date)='2016' then 'Previous Years'
        when year(order_date)='2017' then 'Last Year'
    else 'Current Year' end as year_sales,
    sum(list_price) as total_sales
from
    orders
inner join
    order_items
on
    orders.order_id = order_items.order_id
group by year_sales;

-- List all customers and categorize them based on their total spending. If the total spending is more than 10000, label them as "High Spenders", if it's between 5000 and 10000, label them as "Medium Spenders", otherwise label them as "Low Spenders".

select
    customers.customer_id,
    customers.first_name,
    customers.last_name,
    sum(order_items.list_price) as spending,
    case
        when sum(order_items.list_price) > 10000 then 'High Spenders'
        when sum(order_items.list_price) between 5000 and 10000 then 'Medium Spenders'
    else 'Low Spenders' end as spending_type
from
    customers
inner join
    orders
on
    orders.customer_id = customers.customer_id
inner join
    order_items
on
    orders.order_id = order_items.order_id
group by customers.customer_id, customers.first_name, customers.last_name;


-- Find the staffs and categorize them based on the number of customers they have handled. If the number of customers is more than 50, label them as "Top Performers", between 20 and 50 as "Average Performers", otherwise label them as "Low Performers".


select
    staffs.staff_id,
    staffs.first_name,
    count(distinct orders.customer_id) as customer_cnt,
    case
        when count(distinct orders.customer_id) > 400 then 'High Performers'
        when count(distinct orders.customer_id) between 200 and 400 then 'Medium Performers'
    else 'Low Performers' end as performance_type
from
    customers
inner join
    orders
on
    customers.customer_id = orders.customer_id
inner join
    staffs
on
    orders.staff_id = staffs.staff_id
group by staffs.staff_id,first_name ;

-- Identify customers who have placed orders in all the stores and list their names.


with answer as (
select
    orders.customer_id,
    count(distinct store_id) as distinct_cnt,
    (select count(distinct store_id) from stores) as total_count
from
    customers
inner join
    orders
on
    customers.customer_id = orders.customer_id
group by orders.customer_id)
select
    customer_id
from
    answer
where
    distinct_cnt = total_count;


-- Find the average discount given per product and identify the product with the highest average discount.

with highest_discount_product as (
select
    products.product_id,
    products.product_name,
    avg(discount)*100 as avg_discount
from
    order_items
inner join
    products
on
    order_items.product_id = products.product_id
group by products.product_id, products.product_name),
answer as (
select
    *,
    dense_rank() over (order by avg_discount desc ) as drnk
from
    highest_discount_product)
select
    *
from
    answer
where
    drnk=1;


-- Retrieve the list of stores and classify them based on the total number of orders they have handled. If the number of orders is greater than 100, label them as "High Volume Stores", between 50 and 100 as "Medium Volume Stores", otherwise label them as "Low Volume Stores".

with order_cnt as (
select
    stores.store_id,
    stores.store_name,
    count(distinct orders.order_id) as cnt
from
    stores
inner join
    orders
on
    stores.store_id = orders.store_id
group by stores.store_id,store_name),
answer as (
select
    *,
    dense_rank() over (order by cnt) as drnk
from
    order_cnt)
select
    store_id,
    store_name,
    case
        when drnk =1 then 'High Volume Store'
        when drnk =2 then 'Medium Volume Store'
    else 'Low Volume Store' end as type_store
from
    answer;









